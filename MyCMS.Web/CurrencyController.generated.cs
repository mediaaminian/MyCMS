// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MyCMS.Web.Controllers
{
    public partial class CurrencyController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected CurrencyController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult TopCurrency()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TopCurrency);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UserCurrencys()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserCurrencys);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UserCurrencysList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserCurrencysList);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CurrencyController Actions { get { return MVC.Currency; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Currency";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Currency";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string TopCurrency = "TopCurrency";
            public readonly string DutyCalculator = "DutyCalculator";
            public readonly string Exchange = "Exchange";
            public readonly string DutyCurrencyCalculator = "DutyCurrencyCalculator";
            public readonly string GetAllCurrencies = "GetAllCurrencies";
            public readonly string UserCurrencys = "UserCurrencys";
            public readonly string UserCurrencysList = "UserCurrencysList";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string TopCurrency = "TopCurrency";
            public const string DutyCalculator = "DutyCalculator";
            public const string Exchange = "Exchange";
            public const string DutyCurrencyCalculator = "DutyCurrencyCalculator";
            public const string GetAllCurrencies = "GetAllCurrencies";
            public const string UserCurrencys = "UserCurrencys";
            public const string UserCurrencysList = "UserCurrencysList";
        }


        static readonly ActionParamsClass_TopCurrency s_params_TopCurrency = new ActionParamsClass_TopCurrency();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TopCurrency TopCurrencyParams { get { return s_params_TopCurrency; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TopCurrency
        {
            public readonly string count = "count";
        }
        static readonly ActionParamsClass_DutyCurrencyCalculator s_params_DutyCurrencyCalculator = new ActionParamsClass_DutyCurrencyCalculator();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DutyCurrencyCalculator DutyCurrencyCalculatorParams { get { return s_params_DutyCurrencyCalculator; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DutyCurrencyCalculator
        {
            public readonly string keyword = "keyword";
        }
        static readonly ActionParamsClass_UserCurrencys s_params_UserCurrencys = new ActionParamsClass_UserCurrencys();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UserCurrencys UserCurrencysParams { get { return s_params_UserCurrencys; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UserCurrencys
        {
            public readonly string userName = "userName";
            public readonly string page = "page";
            public readonly string count = "count";
        }
        static readonly ActionParamsClass_UserCurrencysList s_params_UserCurrencysList = new ActionParamsClass_UserCurrencysList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UserCurrencysList UserCurrencysListParams { get { return s_params_UserCurrencysList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UserCurrencysList
        {
            public readonly string userName = "userName";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DutyCalculator = "_DutyCalculator";
                public readonly string _TopCurrency = "_TopCurrency";
                public readonly string _UserCurrency = "_UserCurrency";
                public readonly string DutyCurrencyCalculator = "DutyCurrencyCalculator";
                public readonly string Exchange = "Exchange";
                public readonly string Index = "Index";
                public readonly string UserCurrencyList = "UserCurrencyList";
            }
            public readonly string _DutyCalculator = "~/Views/Currency/_DutyCalculator.cshtml";
            public readonly string _TopCurrency = "~/Views/Currency/_TopCurrency.cshtml";
            public readonly string _UserCurrency = "~/Views/Currency/_UserCurrency.cshtml";
            public readonly string DutyCurrencyCalculator = "~/Views/Currency/DutyCurrencyCalculator.cshtml";
            public readonly string Exchange = "~/Views/Currency/Exchange.cshtml";
            public readonly string Index = "~/Views/Currency/Index.cshtml";
            public readonly string UserCurrencyList = "~/Views/Currency/UserCurrencyList.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_CurrencyController : MyCMS.Web.Controllers.CurrencyController
    {
        public T4MVC_CurrencyController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void TopCurrencyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int count);

        [NonAction]
        public override System.Web.Mvc.ActionResult TopCurrency(int count)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TopCurrency);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "count", count);
            TopCurrencyOverride(callInfo, count);
            return callInfo;
        }

        [NonAction]
        partial void DutyCalculatorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult DutyCalculator()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DutyCalculator);
            DutyCalculatorOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ExchangeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Exchange()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Exchange);
            ExchangeOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void DutyCurrencyCalculatorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string keyword);

        [NonAction]
        public override System.Web.Mvc.ActionResult DutyCurrencyCalculator(string keyword)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DutyCurrencyCalculator);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "keyword", keyword);
            DutyCurrencyCalculatorOverride(callInfo, keyword);
            return callInfo;
        }

        [NonAction]
        partial void GetAllCurrenciesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetAllCurrencies()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetAllCurrencies);
            GetAllCurrenciesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UserCurrencysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string userName, int page, int count);

        [NonAction]
        public override System.Web.Mvc.ActionResult UserCurrencys(string userName, int page, int count)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserCurrencys);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "count", count);
            UserCurrencysOverride(callInfo, userName, page, count);
            return callInfo;
        }

        [NonAction]
        partial void UserCurrencysListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string userName);

        [NonAction]
        public override System.Web.Mvc.ActionResult UserCurrencysList(string userName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserCurrencysList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            UserCurrencysListOverride(callInfo, userName);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
